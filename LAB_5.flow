import string;
import lingo/pegcode/driver;

Expr ::= IntConst, Mul, Add; 
IntConst(value:int);
Mul(left: Expr, right: Expr); 
Add(left: Expr, right: Expr); 

arithGrammarOp = compilePegGrammar("#include C:\VSC\gram.lingo");

Calc(e: Expr)->int
{
  switch(e)
  {
      IntConst(c): c;
      Mul(l, r): Calc(l)*Calc(r);
      Add(l, r): Calc(l)+Calc(r);
  }
};


Print(e:Expr) -> string
{
  switch(e)
  {
      IntConst(c): i2s(c);
      Mul(l, r): "("+Print(l)+"*"+Print(r)+")";
      Add(l, r): "("+Print(l)+"+"+Print(r)+")";
  }
};

Parse(source:string)->Expr {
  parsic(arithGrammarOp, source, defaultPegActions);
};


main()
{
  sources = ["0", "42", "4*5", "(4 *5)", "4 + \t  5", "(4+5)", "1*2*3", "(1*2)*3", "((1+3)*(2+5))", "(1+3)*4+5", "1+3*(4+5)", "1+3*4+5"];
  expressions:[Expr] = mapi(sources, (\i, value -> Parse(value)));
  texts = mapi(expressions,( \i, v -> Print(v)));
  results = mapi(expressions,( \i, v -> Calc(v)));
  println(expressions);
  println(sources);
  println(texts);
  println(results);
  quit(0);
}


